TAN

TANK
JEEP
BAZ

GREEN

TANK
JEEP
BAZ

UNIT CODES

0580 = SARGE
0280 = TANK

== HEADER spec ==
4 bytes: magic string "FORM" (46 4F 52 4D)
4 bytes: (uint32) size in bytes of file contents, from byte 8 (end of this element) to EOF

4 bytes: "MAP " identifier

4 bytes: "CSUM" section identifier (not always present)
4 bytes: length of section in bytes (usually 4)
n/4 bytes: checksum - not sure of the algorithm used, but only seems to matter for ensuring MP maps are the same

4 bytes: "VERS" section identifier
4 bytes: length of section in bytes (usually 8)
n/8 bytes: two 32 bit numbers?

4 bytes: "DESC" section identifier (description)
4 bytes: length of description in bytes
n bytes: description content (usually empty) - nil terminated

4 bytes: "AFIL" section identifier. Audio DB file
4 bytes: length of section
n bytes: contents; nil terminated. Sometimes empty.

4 bytes: "OFIL" section identifier. Objects DB file
4 bytes: length of section
n bytes: contents; nil terminated. Usually empty.

4 bytes: "ASCR" section identifier.
4 bytes: length of section
n bytes: contents; nil terminated. All empty.

4 bytes: "PSCR" section identifier.
4 bytes: length of section
n bytes: contents; nil terminated. All empty.

4 bytes: "MHDR" section identifier. Some kind of header
4 bytes: length of section; usually 12.
n bytes: contents; nil terminated. Appears to contain several fields:
+ 4 bytes: x length (256)
+ 4 bytes: y length (256)
+ 4 bytes: num layers? usually "2". Bayou usually "1". Appears to be the number of "TLAY" layers in the file.

4 bytes: "TNAM" section identifier. Texture file name (ATL file).
4 bytes: length of section
n bytes: contents; nil terminated. Matches ATL file name.

4 bytes: "ONAM" section identifier. Name or directory of objects.dat.
4 bytes: length of section
n bytes: contents; nil terminated. Matches folder names ("Alpine, desert, etc")


== TLAY 1 spec ==
4 bytes: "TLAY" section identifier
4 bytes: number of bytes in section (usually = 256*256*2, + 20)
+ 20 byte header:
++ 4 bytes: TLay index, 0-based. First instance is 0, second is 1, etc
++ 4 bytes: x size (256)
++ 4 bytes: y size (256)
++ 4 bytes: ?, usually 0
++ 4 bytes: ?, usually 0

remaining bytes: 256*256*2. Appears to be a series of uint16, representing texture ID of the given tile.

== TLAY 2 spec ==
Same as TLAY 1. It appears you can layer textures. I do not know how they are blended, perhaps using alpha of top layer.
This is likely used to render hills and valleys, given Bayou is flat and only has 1 TLAY.

OLAY
4 bytes - size of OLAY in bytes
4 bytes - number of object definitions

Then, sets of 4, 4 byte values (16 bytes), x [number of object definitions]: [
(position is index: appears to map to the OATT index below)
4 bytes - item class. Hard-coded list of classes
4 bytes - type no (e.g. grenades are 19 02)
4 bytes - x pos?
4 bytes - y pos?
]

Item classes (aka catagory) are a hard-coded list in the game engine. May differ in AM2+. In AM1, the list
appears to be the following:

SITEMS (decimal value 25)
OVERPASS - 24
MISCELLANEOUS - 23
RADARBUILDING - 22
WALLGATE - 21
GATE - 20
POWERPLANT - 19
PILLBOX - etc
BUILDING
PRISONCAMP
HELIPAD
AIRSTRIP
AUXBASE
BASE
AAGUN
GUNTURRET
EXPLOSIVES
FOOTBRIDGE
BRIDGE
WALL
FENCE
FALLENTREE - etc
BIGTREE - 3
TREE - 2
BUSH - 1
ROCK (decimal value 0)

The Types vary, and may only be hard-coded for certain categories like weapons:

MEDPACK
MEDKIT..
TOWER_RIFLE.
EXPLOSIVE...
MINE....
SWEEPER.
AUTO_RIFLE..
RIFLE...
LARGE_CANNON....
MORTAR..
BAZOOKA.
GRENADE.
FLAME_THROWER...
UNKNOWN?

I have not figured out how to map category and item no to the listing of objects in the DAT file. It doesnt appear that AMM supplies that bridge. It is possible the DAT file assigns items to categories.
This seems likely, given I have swapped DAT files and map still renders. AMM file says: "put a SPECIAL_ITEM of MINES at X, Y", and the game knows which actual object to place.

In the DAT file header is an array of tuple values. The second value is a file offset to the object definition. The first value hasnt been solved yet, but it is a multiple of 32 starting at 32.
We know weapons are SITEMS. Which have a decimal value of 25. This is the category. It seems likely that this may be a 2-dimensional array, where 1st value is the CATEGORY, and second is the type number.

It appears that shifting the value to the right 15 reveals the category number, matches the above list. I suspect shifting by N will reveal the sequence/type_no. There must be a way to take a category and a type_no and
convert it into a single uint32.

No Weapon...Tower Rifle.Mine....Detonator...Mine Sweeper....Auto Rifle..Rifle...Large Cannon....Mortar..Bazooka.Grenade.Flame Thrower...Heavy Machine Gun...Medium Machine Gun..Light Machine Gun...No Item.Unknown Item Type...Null Item.

== OATT spec == (Bootcamp start offset-d: 288701)
Object Attributes Table.
4 bytes - OATT string
4 bytes - number of bytes in OATT block (untrustworthy)
4 bytes - number of elements in structure
OATT BLOCK {
	NOTES
		* This is a structure of N bytes with some general data; varies per map
x fields matching number of elements. It appears to be a key-value list, where key is 4 chars, followed by a uint32 value.

1. Repeat x times to load key-value map. NOTE: the length depends on the version in the header.
[
	4 bytes uint32 - number of object placements
	for each placement: [
		4 bytes: object index - links to the OLAY above
                4 bytes: unknown
		1 byte: only present when version is 6 or above
                4 bytes: length of name string inc nil. Can be zero.
                ^ bytes: char name nil terminated
        ]
}

== MOVE spec ==
4 bytes - MOVE key string
4 bytes - (uint32) number of bytes in whole block (256x256, it seems)

NOTES
	* This appears to be the movement-allowance block, where each byte is a tile and each value is a uint8 representing tile height

== ELOW spec ==
4 bytes - ELOW key string
4 bytes - (uint32) number of bytes in whole block (256x256, it seems)

== TRIG spec ==
4 bytes - TRIG key string
4 bytes - (uint32) number of bytes in whole block (256x256, it seems)

NOTES
	* trigger zones? 1 byte per tile. Used to trigger events?

== BPAD spec ==
4 bytes - BPAD key string
4 bytes - (uint32) number of bytes in whole pad block (256x256, it seems)

* Read n bytes; note that this appears unused or generally empty?

== NPAD spec ==

4 bytes - NPAD key string
4 bytes - (uint32) number of bytes in whole pad block (256x256, it seems)
PAD BLOCK {
	1 byte - (uint8) Each byte coresponds to a single tile, where each value indicates the pad ID for the given tile.
NOTES
	* Likely from upper left to bottom right
	* Read n number bytes until whole block is processed
	* PADs can be given a named reference using the pad ID in the associated script in the form `PAD <codename> <padID>`
}

== SCEN spec ==


4 bytes - size of whole scenario block in bytes
4 bytes - total number of scenarios in block
16 bytes - scenario 1 name (null right padded)
FRACTION BLOCK {
	84 bytes - Fraction header (green -> tan -> blue -> grey)
{
	4 byte - unknown(08 ASCII, sometimes 07)
	4 byte - padding
	4 byte - uint32 - number of "reserved" rifle units number (squad number/para drops) - might just be 1 byte. No less than current number of rifle units in game, and breaks at too high a value
	4 bytes - number of grenaders
	4 bytes - flamers
	4 bytes - bazookas
	4 bytes - Technically "engineers" - but they look and act like regular rifles
	4 bytes - morters
	4 bytes - miners?
	4 bytes - specials?
	4 bytes - unknown - any change caused crash (usually '5') - maybe "Sarge"?
	4 bytes - unknown - any change caused crash (usually '3')
	4 bytes - min jeep units (01 80)
	4 bytes - min tank units (02 80)
	4 bytes - min half-track units (03 80)
	4 bytes - unknown - crashed with value of 1 when zero in MP. Maybe truck/convoy?
	4 bytes - unknown - too low causes crash. No observable impact for high values. Maybe padding/space for special in specific maps
	4 bytes - uint32 - 0-3 - number of starting airstrikes
	4 bytes - uint32 - 0-3 - number of starting paras
	4 bytes - uint32 - 0-3 - number of starting supports
	4 byte - uint32 - number of units in fraction

NOTES

- In multiplayer, it appears that what matters is that the unit blocks have values. Placeholders for placement by human players are added based on the unit block values.
If you want to support placement for AI, then you must add an actual unit in addition to updating the placeholder block.

- Something in this header knows about the unit blocks - app crashes if new units added w/o mod to header, and crashes if mod to header

NOTE: There is no required order to the units in the block.
	
}
	UNITS BLOCK {
		16 bytes - unit header {
			1 byte - unit type ID equal to their position in the header block - e.g. tank = 02)
			1 byte - unit type CLASS
			2 byte - padding
			2 byte uint16 - pixel pos x
			2 byte - padding
			2 byte uint16 - pixel pos y
			2 bytes - unknown - seems unused
			1 byte - uint8 - rotation angle (0-255, counter-clockwise; where 0 = North, 255(360) = N, and 64(90) = West); doesnt seem to work for sarge
			1 byte - boolean - not placed (01) vs placed (00) - a value of not-placed in MP will allow human player to manually place; if AI, pos will be used and script can DEPLOY unit
			1 byte - uint8 number of men in unit - max 9? Possibly due to an internal array on the data type
			1 byte - uint8 - length of unit name string (including \n)
		}
		VARIYING - null-terminated unit name string
}
N+ FRACTION BLOCKS - read until EOF, or find byte of hex 08 (BS) after last unit string
84 bytes - scenario N header
N+ FRACTION BLOCKS
...


ORIG Green: D1 02  36 02 == low x, low y = 47,251,456 : 37,093,376 OR = 721 x 566
ORIG Tan: B7 02   E1 0D == low x, high y = 45,547,520 : 232,849,408 OR = 695 x 3553
Orig grey: 80 0D  AC 01 == high x, low y = 226,492,416 : 28,049,408 OR = 3456 x 428
Blue: BC 0C   B6 0E == high x, high y = 213,647,360 : 246,808,576 OR = 3260 x 3766

Trt TabL B7 02  36 02 == match Y; low x, low y
Try tan: D1 02  E1 0D == match X, low x, high y

FACT: Origin must be Upper Left. Maps are 256 x 256 tiles. Each tile is 16x16 pixels. This is 4096 pixels per row.


---
TAN fraction header

desert1
bootcamp
desert 2 mp